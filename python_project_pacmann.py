# -*- coding: utf-8 -*-
"""Python Project-Pacmann.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Knbbkh6Cf6xDu-eFjLYM0P5tCOIH2PS
"""

import sqlite3
import pandas as pd
from sqlalchemy import create_engine
my_conn = create_engine("sqlite:///transaction.db")

conn = sqlite3.connect('transaction.db')
print("Membuka Database Sukses")

rs = conn.execute('''
CREATE TABLE IF NOT EXISTS kasir_transaction
                          (no_id INTEGER PRIMARY KEY AUTOINCREMENT,
                           nama_item TEXT,
                           jumlah_item INTEGER,
                           harga INTEGER,
                           total_harga INTEGER,
                           diskon REAL,
                           harga_diskon INTEGER);''')
for row in rs:
  print(row)

db =sqlite3.connect('transaction.db')
sql = '''SELECT * FROM kasir_transaction'''
df = pd.read_sql(sql, conn)
df.head()

conn.commit()
conn.close()

class Transaction:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def update_item_name(self, old_name, new_name):
        for item in self.items:
            if item[0] == old_name:
                item[0] = new_name

    def update_item_qty(self, name, new_qty):
        for item in self.items:
            if item[0] == name:
                item[1] = new_qty

    def update_item_price(self, name, new_price):
        for item in self.items:
            if item[0] == name:
                item[2] = new_price

    def delete_item(self, name):
        self.items = [item for item in self.items if item[0] != name]

    def reset_transaction(self):
        self.items = []

    def check_order(self):
        for item in self.items:
            if None in item:
                print("Terdapat kesalahan input data")
                return
        print("Pemesanan sudah benar")
        self.show_transaction()

    def show_transaction(self):
        print("Daftar belanjaan:")
        for item in self.items:
            print("- {} x {} (harga: {})".format(item[0], item[1], item[2]))

    def check_out(self):
        total_price = 0
        for item in self.items:
            total_price += item[1] * item[2]

        if total_price >= 500000:
            discount = 0.07
        elif total_price >= 300000:
            discount = 0.06
        elif total_price >= 200000:
            discount = 0.05
        else:
            discount = 0

        discounted_price = total_price * (1 - discount)

        print("Total harga: {}".format(total_price))
        print("Diskon: {}%".format(int(discount * 100)))
        print("Total harga setelah diskon: {}".format(discounted_price))

        source_data = [(item[0], item[1], item[2], item[1] * item[2], discount, item[1] * item[2] * (1 - discount)) for item in self.items]
        self.insert_to_table(source_data)

    def insert_to_table(self, source_data):
        cursor.executemany("INSERT INTO kasir_transaction (nama_item, jumlah_item, harga, total_harga, diskon, harga_diskon) VALUES (?, ?, ?, ?, ?, ?)", source_data)
        conn.commit()
        conn.close()
    def reset_transaction(self):
        """
        Method untuk menghapus semua item dalam transaksi dan reset transaksi
        """
        self.items = []
        self.transaction_id = ""

    def check_order(self):
        """
        Method untuk melakukan pengecekan kesalahan pada input order
        """
        for item in self.items:
            if not all(item.values()):
                print("Terdapat kesalahan input data")
                return
        print("Pemesanan sudah benar")
        self.show_transaction()

    def check_out(self):
        """
        Method untuk melakukan check out dan menghitung total belanja
        """
        total_harga = sum(item["jumlah"] * item["harga"] for item in self.items)
        diskon = 0
        if total_harga > 500000:
            diskon = 0.07
        elif total_harga > 300000:
            diskon = 0.06
        elif total_harga > 200000:
            diskon = 0.05
        harga_diskon = total_harga - (total_harga * diskon)
        print("Total pembelian: Rp. {:.2f}".format(harga_diskon))

        # insert data to database
        for item in self.items:
            data = (self.transaction_id, item["nama"], item["jumlah"], item["harga"], 
                    item["jumlah"] * item["harga"], diskon, 
                    item["jumlah"] * item["harga"] * (1 - diskon))
            self.insert_to_table(data)

    def check_out(self):
        """
        Calculate total price of all items in the cart and apply discount based on the total price
        """
        total_price = 0
        for item in self.items:
            total_price += item[2] * item[1]
        if total_price >= 500000:
            discount = total_price * 0.07
        elif total_price >= 300000:
            discount = total_price * 0.06
        elif total_price >= 200000:
            discount = total_price * 0.05
        else:
            discount = 0
        final_price = total_price - discount
        print(f"Total Belanja: Rp{total_price:,.0f}")
        if discount > 0:
            print(f"Diskon: Rp{discount:,.0f}")
        print(f"Total Pembayaran: Rp{final_price:,.0f}")
        self.insert_to_table()

    def check_order(self):
        """
        Check if all items in the cart have correct information, and print out the transaction
        """
        for item in self.items:
            if None in item:
                print("Terdapat kesalahan input data")
                return
        print("Pemesanan sudah benar")
        self.show_items()

    def insert_to_table(self):
        """
        Insert transaction data into SQLite database table 'transaction'
        """
        conn = sqlite3.connect('transaction.db')
        c = conn.cursor()
        for item in self.items:
            total_price = item[1] * item[2]
            if total_price >= 500000:
                discount = total_price * 0.07
            elif total_price >= 300000:
                discount = total_price * 0.06
            elif total_price >= 200000:
                discount = total_price * 0.05
            else:
                discount = 0
            final_price = total_price - discount
            c.execute(f"INSERT INTO kasir_transaction(nama_item, jumlah_item, harga, total_harga, diskon, harga_diskon) VALUES('{item[0]}', {item[1]}, {item[2]}, {total_price}, {discount}, {final_price})")
        conn.commit()
        conn.close()
        self.reset_transaction()

import unittest
from db import kasir_transaction

class TestKasir(unittest.TestCase):
    
    def setUp(self):
        self.kasir = Kasir()
        
    def test_tambah_produk(self):
        self.kasir.tambah_produk("Sabun mandi", 5000)
        self.assertIn("Sabun mandi", self.kasir.produk)
        
    def test_hapus_produk(self):
        self.kasir.tambah_produk("Shampoo", 15000)
        self.kasir.hapus_produk("Shampoo")
        self.assertNotIn("Shampoo", self.kasir.produk)
        
    def test_edit_produk(self):
        self.kasir.tambah_produk("Permen", 500)
        self.kasir.edit_produk("Permen", "Permen Karet", 1000)
        self.assertIn("Permen Karet", self.kasir.produk)
        self.assertNotIn("Permen", self.kasir.produk)
        
    def test_jumlah_produk(self):
        self.kasir.tambah_produk("Gula", 10000)
        self.assertEqual(self.kasir.jumlah_produk(), 1)
        
    def test_total_penjualan(self):
        self.kasir.tambah_produk("Sabun cuci piring", 8000)
        self.kasir.tambah_produk("Sikat gigi", 5000)
        self.kasir.tambah_produk("Shampoo", 15000)
        self.kasir.tambah_produk("Permen", 500)
        self.kasir.tambah_produk("Gula", 10000)
        self.kasir.beli_produk("Sabun cuci piring", 2)
        self.kasir.beli_produk("Sikat gigi", 3)
        self.kasir.beli_produk("Shampoo", 1)
        self.kasir.beli_produk("Permen", 5)
        self.kasir.beli_produk("Gula", 2)
        self.assertEqual(self.kasir.total_penjualan(), 104500)
        
if __name__ == '__main__':
    unittest.main()